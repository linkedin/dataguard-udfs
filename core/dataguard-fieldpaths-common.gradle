apply plugin: 'antlr'

// Ref: https://docs.gradle.org/current/userguide/antlr_plugin.html
generateGrammarSource {
    // visitor flag is required for auto-generating a visitor class on the syntax tree
    arguments += ["-visitor", "-long-messages"]

    // Keep a copy of generated sources for intellij to use as source
    doLast {
        println "Copying generated grammar lexer/parser files to main directory."
        copy {
            from "${buildDir}/generated-src/antlr/main/com/linkedin/dataguard/runtime/fieldpaths/tms"
            into "generated-src/main/java/com/linkedin/dataguard/runtime/fieldpaths/tms"
        }

        copy {
            from "${buildDir}/generated-src/antlr/main/com/linkedin/dataguard/runtime/fieldpaths/virtual"
            into "generated-src/main/java/com/linkedin/dataguard/runtime/fieldpaths/virtual/parsing"
        }
    }
}

dependencies {
    compileOnly rootProject.ext.slf4jdepapi
    // The version is used according to guidance on http://go/log4j2
    implementation rootProject.ext.log4j2Slf4jImpl
    implementation rootProject.ext.guava
    implementation rootProject.ext.transportApi
    implementation rootProject.ext.transportTypeSystem
    implementation project(':transport:dataguard-transport-common')
    testImplementation project(':transport:dataguard-transport-java')
}

// Helper task to debug source set information
task printSourceSets(){
    doLast{
        sourceSets.each { sourceSet ->
            println "[" + sourceSet.name + "]"
            println "-> Source dirs: " + sourceSet.allJava.srcDirs
            println "-> Output dirs : "+ sourceSet.output.classesDirs.files
        }
    }
}

clean.doLast {
    file('generated-src').deleteDir()
}

compileJava.dependsOn generateGrammarSource

// Expose test artifacts as a jar
configurations {
    testArtifacts {
        // This is needed because the consumers need the runtime
        // dependencies of the test code. Otherwise, consumers will
        // need to fetch these dependencies themselves on adhoc basis.
        extendsFrom testRuntimeClasspath
    }
}

task testJar(type: Jar) {
    from sourceSets.test.output
    classifier = 'tests'
}

artifacts.add('testArtifacts', testJar)
